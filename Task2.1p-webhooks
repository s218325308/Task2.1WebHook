
//Code based and expanded upon sketcgh example provided under DHT library
  // Example testing sketch for various DHT humidity/temperature sensors
  // Written by ladyada, public domain

  // REQUIRES the following Arduino libraries:
  // - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
  // - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor

#include "DHT.h"
#include <WiFiNINA.h>
#include "secrets.h"

#define PIEZO_PIN 3 //Digital pin connected to Pizo Speaker
#define DHTPIN 2     // Digital pin connected to the DHT sensor
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --
// Pin 15 can work but DHT must be disconnected during program upload.

// Uncomment whatever type you're using!
#define DHTTYPE DHT11   // DHT 11
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

char ssid[] = SECRET_SSID; // Your WiFi network SSID
char pass[] = SECRET_PASS; // Your WiFi network password
char server[] = "api.thingspeak.com"; // ThingSpeak server
float maxTemperatureThreshold = 36.0;

WiFiClient client;


// Initialize DHT sensor.
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  Serial.println(F("DHTxx test!"));

  dht.begin();

  // Connect to WiFi
  connectWiFi();
}

void connectWiFi() {
  Serial.print("Connecting to WiFi...");
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected!");
}

void sendToThingSpeak(float temperature, float humidity) {
  if (client.connect(server, 80)) {
    // Construct the URL with parameters for temperature and humidity fields
    String url = "/update?api_key=";
    url += SECRET_THINGSPEAK_API_KEY;
    url += "&field1=";
    url += String(temperature);
    url += "&field2=";
    url += String(humidity);

    // Send HTTP GET request to ThingSpeak
    client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                 "Host: " + server + "\r\n" +
                 "Connection: close\r\n\r\n");

    Serial.println("Data sent to ThingSpeak!");

    // Close the connection
    client.stop();
  } else {
    Serial.println("Failed to connect to ThingSpeak!");
  }
}

//Controls the PIZO to make auidble buzz for 1.5 seconds
void buzzAlarm() {
  tone(PIEZO_PIN, 1000); // Buzz the piezo speaker at 1000 Hz
  delay(1500);           // Buzz for 1.5 second
  noTone(PIEZO_PIN);     // Turn off the piezo speaker
}


void loop() {
  // Wait a few seconds between measurements.
  delay(60000);

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Check if temperature is greater than or equal to threshold
  if (t >= maxTemperatureThreshold) {
    // Output alarm message to console
    Serial.println("ALARM - TEMPERATURE Has exceeded " + String(maxTemperatureThreshold) + "°C!");
    //audiblke alarm for exceeding MAX temp
    buzzAlarm();
  }

  // Send data to ThingSpeak
  sendToThingSpeak(t, h);

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);


  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));
}
